{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/nurrizkyimani/programming-all/bitcoin_fetch/components/Prices.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nvar Prices =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Prices, _React$Component);\n\n  function Prices() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Prices);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Prices)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      currency: 'USD'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"cryptoLoop\", function () {\n      var table = [];\n      var n = _this.props.cmc.data.length;\n\n      for (var i = 0; i <= n - 1; i++) {\n        table.push(__jsx(\"div\", {\n          className: \"cryptocmc\",\n          key: _this.props.cmc.data[i].id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, __jsx(\"ul\", {\n          className: \"list-group\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 16\n          },\n          __self: this\n        }, __jsx(\"li\", {\n          className: \"list-group-item\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 17\n          },\n          __self: this\n        }, \" price for \", _this.props.cmc.data[i].name, \" : \", __jsx(\"span\", {\n          className: \"badge badge-primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, \" USD \"), __jsx(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        }, \"    \", _this.props.cmc.data[i].quote.USD.price, \" \"), __jsx(\"span\", {\n          className: \"badge badge-primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }, \" VOLUME 24H:  \"), __jsx(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 22\n          },\n          __self: this\n        }, \"    \", _this.props.cmc.data[i].quote.USD.volume_24h, \" \")))));\n      }\n\n      return table;\n    });\n\n    return _this;\n  }\n\n  _createClass(Prices, [{\n    key: \"render\",\n    //render the component \n    value: function render() {\n      var _this2 = this;\n\n      console.log('totale iki:' + this.props.cmc.data.length);\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, __jsx(\"ul\", {\n        className: \"list-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, __jsx(\"li\", {\n        className: \"list-group-item\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Bitcoin rate for  \", this.props.bpi[this.state.currency].description, \" : \", __jsx(\"span\", {\n        className: \"badge badge-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"  \", this.props.bpi[this.state.currency].code, \"  \"), __jsx(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      }, \"   \", this.props.bpi[this.state.currency].rate, \"  \"))), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }), __jsx(\"select\", {\n        onChange: function onChange(e) {\n          return _this2.setState({\n            currency: e.target.value\n          });\n        },\n        className: \"form-control\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, __jsx(\"option\", {\n        value: \"USD\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, \"USD\"), __jsx(\"option\", {\n        value: \"GBP\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"GBP\"), __jsx(\"option\", {\n        value: \"EUR\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, \"EUR\")), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      }), __jsx(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Also Check current Another cryptocurrencies Price: \"), __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, this.cryptoLoop()));\n    }\n  }]);\n\n  return Prices;\n}(React.Component);\n\nexport default Prices;","map":{"version":3,"sources":["/Users/nurrizkyimani/programming-all/bitcoin_fetch/components/Prices.js"],"names":["Prices","currency","table","n","props","cmc","data","length","i","push","id","name","quote","USD","price","volume_24h","console","log","bpi","state","description","code","rate","e","setState","target","value","cryptoLoop","React","Component"],"mappings":"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","sourcesContent":["\n\nclass Prices extends React.Component {\n    state = {\n      currency: 'USD'\n    }\n\n    //component: price of the cyptocurrencies; return the table with JSX; \n    cryptoLoop = () => {\n      let table = []\n      let n = this.props.cmc.data.length\n\n      for(let i = 0; i <= n-1; i++) {\n          table.push(\n             <div className=\"cryptocmc\" key= {this.props.cmc.data[i].id}>\n                <ul className=\"list-group\">\n                    <li className=\"list-group-item\"> price for {this.props.cmc.data[i].name} : {  }\n                        <span className=\"badge badge-primary\"> USD </span>\n                        <strong>    {this.props.cmc.data[i].quote.USD.price} </strong>\n\n                        <span className=\"badge badge-primary\"> VOLUME 24H:  </span>\n                        <strong>    {this.props.cmc.data[i].quote.USD.volume_24h} </strong>\n\n                    </li>\n                </ul>\n               \n          </div>\n          )\n      }\n      return table\n    }\n\n\n    \n\n    //render the component \n    render() {\n\n        console.log('totale iki:' + this.props.cmc.data.length)\n      return (\n        <div>\n          <ul className=\"list-group\">\n            <li className=\"list-group-item\">Bitcoin rate for  {this.props.bpi[this.state.currency].description} : { }\n            <span className=\"badge badge-primary\">  {this.props.bpi[this.state.currency].code}  </span> \n            <strong>   {this.props.bpi[this.state.currency].rate}  </strong>\n          </li>\n          </ul>\n          <br/>\n          <select onChange={e => this.setState({currency: e.target.value})} className=\"form-control\">\n            <option value=\"USD\">USD</option>\n            <option value=\"GBP\">GBP</option>\n            <option value=\"EUR\">EUR</option>\n          </select>\n          \n          <br/>\n\n          <p>Also Check current Another cryptocurrencies Price: </p>\n          \n          {/* render the cyptoLoop component */}\n          <div>\n              {this.cryptoLoop()}\n          </div>\n\n        \n          \n        </div>\n        \n      );\n    }\n  }\n  \n  export default Prices;"]},"metadata":{},"sourceType":"module"}